#/*
#Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
#SPDX-License-Identifier: X11
#*/

//#include "cmdlineparser.h"
#include <iostream>
#include <cstring>

// XRT includes
#include "xrt/xrt_bo.h"
#include <experimental/xrt_xclbin.h>
#include "xrt/xrt_device.h"
#include "xrt/xrt_kernel.h"
#include <experimental/xrt_queue.h>

#include "StreamInterface.h"

#define DATA_SIZE (1024*16)

#define QUEUE_CNT 4

int main(int argc, char** argv) {

/*
    std::cout << "argc = " << argc << std::endl;
	for(int i=0; i < argc; i++){
	    std::cout << "argv[" << i << "] = " << argv[i] << std::endl;
	}
*/

	srand(time(NULL));
    // Read settings
    std::string binaryFile = "./kernel.xclbin";
    int device_index = 0;

    std::cout << "Open the device" << device_index << std::endl;
    auto device = xrt::device(device_index);
    std::cout << "Load the xclbin " << binaryFile << std::endl;
    auto uuid = device.load_xclbin("./kernel.xclbin");

    size_t vector_size_bytes = sizeof(int) * DATA_SIZE;

    //auto krnl = xrt::kernel(device, uuid, "kernel");
    auto krnl = xrt::kernel(device, uuid, "kernel", xrt::kernel::cu_access_mode::exclusive);

    std::cout << "Allocate Buffer in Global Memory\n";
    auto boIn = xrt::bo(device, vector_size_bytes, krnl.group_id(0)); //Match kernel arguments to RTL kernel
    auto boOut = xrt::bo(device, vector_size_bytes, krnl.group_id(1));

    // Map the contents of the buffer object into host memory
    auto bo0_map = boIn.map<int*>();
    auto bo1_map = boOut.map<int*>();
    std::fill(bo0_map, bo0_map + DATA_SIZE, 0);
    std::fill(bo1_map, bo1_map + DATA_SIZE, 0);

    // Create the test data
    int bufReference[DATA_SIZE];
	int rid = 0;
    for (int i = 0; i < DATA_SIZE; ++i) {
        bo0_map[i] = rand()%256;
		if ( bo0_map[i] < 128 ) bufReference[rid++] = bo0_map[i]; //Generate check data for validation
    }

	auto run = xrt::run(krnl);
	run.set_arg(0, boIn);
	run.set_arg(1, boOut);
	run.set_arg(2, 0);
	run.set_arg(3, 0);
	run.set_arg(4, DATA_SIZE);



	xrt::queue async_queue[QUEUE_CNT];
	xrt::queue::event last_events[QUEUE_CNT];

	//auto boIn_event = async_queue[0].enqueue([&boIn] { boIn.sync(XCL_BO_SYNC_BO_TO_DEVICE); });
    boIn.sync(XCL_BO_SYNC_BO_TO_DEVICE);
	for ( int i = 0; i < 1024*256; i++ ) {
		int qid = i%QUEUE_CNT;

		if ( i%1024 == 0 ) printf( "@@@%d\n", i );

		//if ( i>= QUEUE_CNT) last_events[qid].wait();


		
		auto boIn_event = async_queue[qid].enqueue([&boIn] { boIn.sync(XCL_BO_SYNC_BO_TO_DEVICE); });
		auto run_event = async_queue[qid].enqueue([&run] {
				run.start();
				//run.wait();
				});
		auto bo_out_event = async_queue[qid].enqueue([&boOut] { boOut.sync(XCL_BO_SYNC_BO_FROM_DEVICE); });
		bo_out_event.wait();
		//last_events[qid] = bo_out_event;

		//if ( i>= QUEUE_CNT) 
		//last_events[qid].wait();
		//run_event.wait();
	}
	boOut.sync(XCL_BO_SYNC_BO_FROM_DEVICE);
	//auto bo_out_event = async_queue[0].enqueue([&boOut] { boOut.sync(XCL_BO_SYNC_BO_FROM_DEVICE); });
	//bo_out_event.wait();

   // // Synchronize buffer content with device side
   // //std::cout << "synchronize input buffer data to device global memory\n";
   // boIn.sync(XCL_BO_SYNC_BO_TO_DEVICE);

   // //std::cout << "Execution of the kernel\n";
   // auto run = krnl(boIn, boOut, 0, 0, DATA_SIZE); //DATA_SIZE=size
   // run.wait();

   // // Get the output;
   // //std::cout << "Get the output data from the device" << std::endl;
   // boOut.sync(XCL_BO_SYNC_BO_FROM_DEVICE);





	int outsize = bo1_map[0];
	printf( "Returned %d (~%d) out of %d\n", outsize, rid, DATA_SIZE );

    // Validate results
    if (std::memcmp(bo1_map+(64/sizeof(unsigned int)), bufReference, outsize)) {
        //throw std::runtime_error("Value read back does not match reference");
		return 1;
	}

    std::cout << "TEST PASSED\n";
    return 0;
}
